tokens:
int := -?(0|[1-9][0-9]*)
float := -?( (0|[1-9][0-9]*)\.[0-9]* | \.[0-9]+ )
id := [a-zA-Z_][a-zA-Z_0-9]*
directive := #[^\n]*\n

operator precedence:
-!~
*/%
+-
<< >>
^|&
== != > < >= <=
&& ||

nonterminals:
<toplevel> -> directive | <vardecl> | <funcdef>
<funcdef> -> <type> id ( [ <paramdecls> ] ) <block>
<paramdecls> -> <paramdecl> { , <paramdecl> }
<paramdecl> -> <type> id
<statement> -> <vardecl> | <expr> ; | <return> | <ifblock> | <forloop> | <whileloop> | <block>
<block> -> \{ {<statement>} \}
<vardecl> -> <type> id [ = <expr> ] { , id [ = <expr> ] };
<return> -> return [ <expr> ] ;
<ifblock> -> if ( <expr> ) <statement> [ else <statement> ]
<forloop> -> for ( [ <statement> ] ; <expr> ; [ <statement> ] ) <statement>
<whileloop> -> while ( <expr> ) <statement>
<expr> -> <assignment> | <logic>
<assignment> -> <lvalue> asign_op { <lvalue> assign_op } <expr>
<lvalue> -> id | <expr> \[ <expr> \]
<funccall> -> id ( [ <args> ] )
<args> -> <expr> { , <expr> }
<logic> -> <comparison> { logic_op <comparison> }
<comparison> -> <bits> { comp_op <bits> }
<bits> -> <addition> { bit_op <addition> }
<addition> -> <multiplication> { add_op <multiplication> }
<multiplication> -> <unary> { mul_op <unary> }
<unary> -> [ unary_op ] <value>
<value> -> ( <expr> ) | id | literal | funccall
