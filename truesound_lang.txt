goal = { VARDECL | FUNCDEF } ;
VARDECL = id, id, [ assign, EXPR ], { comma, id, [ assign, EXPR ] }, semicolon ;
FUNCDEF = TYPENAME, id, lparen, [ PARAMS ], rparen, BLOCK ;
PARAMS = PARAM, { comma, PARAM } ;
PARAM = TYPENAME, id ;
TYPENAME = id, [ lbrack, rbrack ] ;
STMT = VARDECL | EXPR, semicolon | RETURN | IFBLOCK | FORLOOP | WHILELOOP | ASSIGNMENT | BLOCK ;
ASSIGNMENT = ( LVALUE, assign )+, EXPR, semicolon ;
LVALUE = id | EXPR, lbrack, EXPR, rbrack ;
FUNCCALL = id, lparen, [ ARGS ], rparen ;
ARGS = EXPR, { comma, EXPR } ;
EXPR = COMPARISON, { logicop, COMPARISON } ;
COMPARISON = BITS, { compop, BITS } ;
BITS = SHIFT, { bitop, SHIFT } ;
SHIFT = ADDITION, { shiftop, ADDITION } ;
ADDITION = MULTIPLY, { addop, MULTIPLY } ;
MULTIPLY = UNARY, { mulop, UNARY } ;
UNARY = [ unaryop ], VALUE ;
VALUE = lparen, EXPR, rparen | id | literal ;
RETURN = return, EXPR, semicolon ;
IFBLOCK = if, lparen, EXPR, rparen, STMT, [ else, STMT ] ;
WHILELOOP = while, lparen, EXPR, rparen, STMT ;
FORLOOP = for, lparen, STMT, EXPR, semicolon, STMT, rparen, STMT ;
BLOCK = lbrace, { STMT }, rbrace ;
